cancer = read.csv("wbcd.csv", stringsAsFactors = F)
cancer = read.csv("/data.csv", stringsAsFactors = F)
cancer = read.csv("data/data.csv", stringsAsFactors = F)
str(cancer)
cancer = cancer[,c(-1,-33)]
table(cancer$diagnosis)
summary(cancer)
cancer$diagnosis = factor(cancer$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
str(cancer)
round(prop.table(table(cancer$diagnosis))*100, 1)
normalize = function(x){
return((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
cancer_n = as.data.frame(lapply(cancer[2:31], normalize))
summary(cancer_n$area_mean)
library(dplyr)
library(class)
library(gmodels)
View(cancer_n)
cancer_n$diagnosis = cancer$diagnosis
View(cancer_n)
View(cancer)
#Making training and test data
set.seed(123)
cancer.survival <- cancer_n$diagnosis %>%
createDataPartition(p = 0.75, list = FALSE)
library(caret)
#Making training and test data
set.seed(123)
cancer.survival <- cancer_n$diagnosis %>%
createDataPartition(p = 0.75, list = FALSE)
cancer_train = cancer_n[cancer.survival,]
cancer_test = cancer_n[-cancer.survival,]
cancer_train_labels = cancer_train[,31]
cancer_test_labels = cancer[,31]
cancer_test_labels = cancer_test[,31]
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 21)
CrossTable(cancer_test_labels, cancer_test_pred, prop.chisq = F)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 1)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 3)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 5)
confusionMatrix(cancer_test_pred,cancer_test_labels)
View(cancer_test)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 7)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 5)
confusionMatrix(cancer_test_pred,cancer_test_labels)
round(prop.table(table(cancer_train$diagnosis))*100, 1)
round(prop.table(table(cancer_test$diagnosis))*100, 1)
library(randomForest)
rf1 = randomForest(diagnosis~.,cancer_train, method = "class")
summary(rf1)
rf1
rfpred = predict(rf1,cancer_test[,-31])
confusionMatrix(rfpred,cancer_test_labels)
rf1 = randomForest(diagnosis~.,cancer_train, method = "class", mtry = 3)
rf1
rfpred = predict(rf1,cancer_test[,-31])
confusionMatrix(rfpred,cancer_test_labels)
confusionMatrix(cancer_test_pred,cancer_test_labels)
View(cancer)
table(cancer$diagnosis)
cancer.survival <- cancer_n$diagnosis %>%
createDataPartition(p = 0.70, list = FALSE)
cancer_train = cancer_n[cancer.survival,]
cancer_test = cancer_n[-cancer.survival,]
round(prop.table(table(cancer_train$diagnosis))*100, 1)
round(prop.table(table(cancer_test$diagnosis))*100, 1)
cancer_train_labels = cancer_train[,31]
cancer_test_labels = cancer_test[,31]
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 5)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 1)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 3)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 7)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 21)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 11)
confusionMatrix(cancer_test_pred,cancer_test_labels)
cancer_test_pred = knn(cancer_train[,-31], cancer_test[,-31], cancer_train_labels, 3)
confusionMatrix(cancer_test_pred,cancer_test_labels)
rf1 = randomForest(diagnosis~.,cancer_train, method = "class", mtry = 3)
rf1
rfpred = predict(rf1,cancer_test[,-31])
confusionMatrix(rfpred,cancer_test_labels)
rf1 = randomForest(diagnosis~.,cancer_train, method = "class", mtry = 2)
rf1
rfpred = predict(rf1,cancer_test[,-31])
confusionMatrix(rfpred,cancer_test_labels)
library(svm)
plot(rf1)
rf1 = randomForest(diagnosis~.,cancer_train, method = "class", ntree = 50)
rf1
rfpred = predict(rf1,cancer_test[,-31])
confusionMatrix(rfpred,cancer_test_labels)
rf1 = randomForest(diagnosis~.,cancer_train, method = "class")
rf1
rfpred = predict(rf1,cancer_test[,-31])
confusionMatrix(rfpred,cancer_test_labels)
rf1 = randomForest(diagnosis~.,cancer_train, method = "class", mtry = 2)
rf1
rfpred = predict(rf1,cancer_test[,-31])
confusionMatrix(rfpred,cancer_test_labels)
library(e1071)
svmodel = svm(diagnosis~.,cancer_train)
svmodel
svmpred = predict(svmodel,cancer_test[,-31])
confusionMatrix(rfpred,cancer_test_labels)
importance(rf1)
sort(importance(rf1))
order(importance(rf1))
importance(rf1)
cost = 2^(0:5)
cost
rm(cost)
confusionMatrix(cancer_test_pred,cancer_test_labels)
install.packages("PerformanceAnalytics")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("GGally")
knitr::opts_chunk$set(warning = F, message = F)
library(rpart)
cart = rpart(diagnosis~.,data=cancer_train[,-1], method = "class")
set.seed(123)
library(dplyr)
library(caret)
cancer.survival <- cancer_n$diagnosis %>%
createDataPartition(p = 0.70, list = FALSE)
cancer_train = cancer_n[cancer.survival,]
cancer_test = cancer_n[-cancer.survival,]
prop.table(table(cancer_train$diagnosis))
library(rpart)
cart = rpart(diagnosis~.,data=cancer_train[,-1], method = "class")
cart_pred = predict(cart, cancer_test[,c(-1,-2)], type="class")
cart_CM  = confusionMatrix(cart_pred, cancer_test$diagnosis)
cart_CM
cart_prun = prune(cart, cp=cart$cptable[which.min(cart$cptable[,"xerror"]),"CP"])
cart_pred_prun = predict(cart_prun, cancer_test[,c(-1,-2)], type="class")
cart_CM_pru = confusionMatrix(cart_pred_prun, cancer_test$diagnosis)
cart_CM_pru
library(rpart)
cart_prun = prune(cart, cp=cart$cptable[which.min(cart$cptable[,"xerror"]),"CP"])
cart_pred_prun = predict(cart_prun, cancer_test[,c(-1,-2)], type="class")
cart_CM_pru = confusionMatrix(cart_pred_prun, cancer_test$diagnosis)
cart_CM_pru
cart_prun
summary(cart_prun)
View(cancer_train)
confusionMatrix(cancer_test_pred,cancer_test_labels)
install.packages("highcharter")
library(class)
acc <- numeric()
for(i in 1:20){
knn_pred = knn(cancer_train[,c(-1,-2)], cancer_test[,c(-1,-2)], cancer_train$diagnosis, k=i, prob=T)
acc = c(acc,mean(knn_pred==cancer_test$diagnosis))
}
acc = data.frame(k= seq(1,20), accuracy = acc)
tune_k = subset(acc, accuracy==max(accuracy))[1,]
subs = paste("Optimal number of k is", tune_k$k, "(accuracy :", tune_k$accuracy,") in KNN")
library(highcharter)
library(highcharter)
acc
tune_k
tune_k$k
tune_k$accuracy
acc
tune_k$k
pred_knn = knn(cancer_train[,c(-1,-2)], cancer_test[,c(-1,-2)],cancer_train$diagnosis, k=tune_k$k)
knn_CM  = confusionMatrix(pred_knn, cancer_test$diagnosis)
knn_CM
library(randomForest)
rf = randomForest(diagnosis~.,cancer_train[,-1],importance = T)
rf_pred = predict(rf, cancer_test[,c(-1,-2)])
rf_CM = confusionMatrix(rf_pred,cancer_test$diagnosis)
rf_CM
library(randomForest)
rf = randomForest(diagnosis~.,cancer_train[,-1],importance = T)
rf_pred = predict(rf, cancer_test[,c(-1,-2)])
rf_CM = confusionMatrix(rf_pred,cancer_test$diagnosis)
rf_CM
importance(rf_CM)
importance(rf)
adaml
library(ada)
cntrl <- rpart.control(cp = -1, maxdepth = 14,maxcompete = 1,xval = 0)
adaml <- ada(diagnosis~., cancer_train[,-1], test.x = cancer_train[,c(-1,-2)], test.y = cancer_train[,2], type = "gentle", control = cntrl, iter = 70)
ada_pred <- predict(adaml, cancer_test[,c(-1,-2)])
ada_CM <- confusionMatrix(ada_pred, cancer_test$diagnosis)
ada_CM
adaml
gamma = seq(0,0.1,0.005)
cost = 2^(0:5)
param = expand.grid(cost=cost, gamma=gamma)
acc = numeric()
acc1 = NULL; acc2 = NULL
for(i in 1:NROW(param)){
svmodel2 = svm(diagnosis~., cancer_train[,-1], gamma=param$gamma[i], cost=param$cost[i])
svm_pred2 = predict(svmodel2, cancer_test[,c(-1,-2)])
acc1 = confusionMatrix(svm_pred2, cancer_test$diagnosis)
acc2[i] = acc1$overall[1]
}
library(e1071)
gamma = seq(0,0.1,0.005)
cost = 2^(0:5)
param = expand.grid(cost=cost, gamma=gamma)
acc = numeric()
acc1 = NULL; acc2 = NULL
for(i in 1:NROW(param)){
svmodel2 = svm(diagnosis~., cancer_train[,-1], gamma=param$gamma[i], cost=param$cost[i])
svm_pred2 = predict(svmodel2, cancer_test[,c(-1,-2)])
acc1 = confusionMatrix(svm_pred2, cancer_test$diagnosis)
acc2[i] = acc1$overall[1]
}
acc_list = data.frame(p= seq(1,NROW(param)), accuracy = acc2)
tune_p = subset(acc_list, accuracy==max(accuracy))[1,]
subs = paste("Optimal number of parameter is", tune_p$p, "(accuracy :", tune_p$accuracy,") in SVM")
svm_tune = svm(diagnosis~., cancer_train[,-1], cost=param$cost[tune_p$p], gamma=param$gamma[tune_p$p])
svm_tunepred = predict(svm_tune, cancer_test[,c(-1,-2)])
svm_CMtune = confusionMatrix(svm_tunepred, cancer_test$diagnosis)
svm_CMtune
gamma
cost
param
param$gamma[7]
param
acc1
acc2[i]
acc_list
tune_p
acc_list
subs
acc1$overall
acc1$overall[1]
acc1$overall
param$cost[tune_p$p]
param$gamma[tune_p$p]
svm_tune = svm(diagnosis~., cancer_train[,-1], cost=param$cost[tune_p$p], gamma=param$gamma[tune_p$p])
svm_tunepred = predict(svm_tune, cancer_test[,c(-1,-2)])
svm_CMtune = confusionMatrix(svm_tunepred, cancer_test$diagnosis)
svm_CMtune
subs
acc_list
acc_list
tune_p
acc_list
tune_p
subs
acc1$overall
acc_list
tune_k
acc
library(class)
acc <- numeric()
for(i in 1:20){
knn_pred = knn(cancer_train[,c(-1,-2)], cancer_test[,c(-1,-2)], cancer_train$diagnosis, k=i)
acc = c(acc,mean(knn_pred==cancer_test$diagnosis))
}
acc = data.frame(k= seq(1,20), accuracy = acc)
tune_k = subset(acc, accuracy==max(accuracy))[1,]
subs = paste("Optimal number of k is", tune_k$k, "(accuracy :", round(tune_k$accuracy,4),") in KNN")
library(ggplot2)
ggplot(acc, aes(x=k,y= accuracy)) +
geom_line()+labs(title = "Accuracy with changing k", subtitle = subs)
acc
tune_k
acc
model_cmp = data.frame(Model = c("CART","CART prune","C5.0","Random Forest","SVM","SVM Tuned", "Ada boost","knn tuned"), Accuracy = c(cart_CM$overall[1],cart_CM_pru$overall[1],c50_CM$overall[1],rf_CM$overall[1],svm_CM$overall[1],svm_CMtune$overall[1],ada_CM$overall[1],knn_CM$overall[1]))
model_cmp
model_cmp = data.frame(Model = c("CART","CART prune","C5.0","Random Forest","SVM","SVM Tuned", "Ada boost","knn tuned"), Accuracy = c(cart_CM$overall[1],cart_CM_pru$overall[1],c50_CM$overall[1],rf_CM$overall[1],svm_CM$overall[1],svm_CMtune$overall[1],ada_CM$overall[1],knn_CM$overall[1]))
library(C50)
c50 <- C5.0(cancer_train[,c(-1,-2)],cancer_train$diagnosis, trials =15)
c50_pred = predict(c50, cancer_test[,c(-1,-2)])
c50_CM = confusionMatrix(c50_pred, cancer_test$diagnosis)
c50_CM
cart_CM$overall[1]
c50_CM$overall[1]
model_cmp = data.frame(Model = c("CART","CART prune","C5.0","Random Forest","SVM","SVM Tuned", "Ada boost","knn tuned"), Accuracy = c(cart_CM$overall[1],cart_CM_pru$overall[1],c50_CM$overall[1],rf_CM$overall[1],svm_CM$overall[1],svm_CMtune$overall[1],ada_CM$overall[1],knn_CM$overall[1]))
model_cmp = data.frame(Model = c("CART","CART prune","C5.0","Random Forest","SVM","SVM Tuned", "Ada boost","knn tuned"), Accuracy = c(cart_CM$overall[1],cart_CM_pru$overall[1],c50_CM$overall[1],rf_CM$overall[1],svm_CM$overall[1],svm_CMtune$overall[1],ada_CM$overall[1],knn_CM$overall[1]))
model_cmp = data.frame(Model = c("CART","CART prune","C5.0","Random Forest","SVM","SVM Tuned", "Ada boost","knn tuned"), Accuracy = c(cart_CM$overall[1],cart_CM_pru$overall[1],c50_CM$overall[1],rf_CM$overall[1],svm_CM$overall[1],svm_CMtune$overall[1],ada_CM$overall[1],knn_CM$overall[1]))
model_cmp = data.frame(Model = c("CART","CART prune","C5.0","Random Forest","SVM","SVM Tuned", "Ada boost","knn tuned"), Accuracy = c(cart_CM$overall[1],cart_CM_pru$overall[1],c50_CM$overall[1],rf_CM$overall[1],svm_CM$overall[1],svm_CMtune$overall[1],ada_CM$overall[1],knn_CM$overall[1]))
model_cmp = data.frame(Model = c("CART","CART prune","C5.0","Random Forest","SVM","SVM Tuned", "Ada boost","knn tuned"), Accuracy = c(cart_CM$overall[1],cart_CM_pru$overall[1],c50_CM$overall[1],rf_CM$overall[1],svm_CM$overall[1],svm_CMtune$overall[1],ada_CM$overall[1],knn_CM$overall[1]))
model_cmp = data.frame(Model = c("CART","CART prune","C5.0","Random Forest","SVM","SVM Tuned", "Ada boost","knn tuned"), Accuracy = c(cart_CM$overall[1],cart_CM_pru$overall[1],c50_CM$overall[1],rf_CM$overall[1],svm_CM$overall[1],svm_CMtune$overall[1],ada_CM$overall[1],knn_CM$overall[1]))
svm_CM$overall[1]
svm_CM$overall[1]
submit = data.frame(id = cancer_test[,1],predicted_status = svm_tunepred[,1])
submit = data.frame(id = cancer_test[,1],predicted_status = svm_tunepred)
submit = data.frame(id = cancer_test[,1],predicted_status = svm_tunepred)
submit = data.frame(id = cancer_test[,1],predicted_status = svm_tunepred)
submit
